'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var loadScript = function loadScript(url, id) {
  return new Promise(function (resolve, reject) {
    var ready = false;
    if (!document) {
      reject(new Error('Document was not defined'));
    }

    var tag = document.getElementsByTagName('script')[0];
    var script = document.createElement('script');

    script.crossOrigin = '';
    script.id = id + '-script';
    script.type = 'text/javascript';
    script.src = url;
    script.onreadystatechange = function () {
      if (!ready) {
        ready = true;
        resolve(script);
      }
    };
    script.onload = script.onreadystatechange;

    script.onerror = function (msg) {
      reject(new Error('Error loading script.'));
    };

    script.onabort = function (msg) {
      reject(new Error('Script loading aborted.'));
    };

    if (tag.parentNode != null) {
      //tag.parentNode.insertBefore(script, tag);
      tag.parentNode.insertBefore(script, tag);
    }
  });
};

var removeScript = function removeScript(id) {
  new Promise(function (resolve, reject) {
    var script = document.getElementById(id + '-script');
    if (script) {
      script.remove();
      resolve();
    } else {
      reject(new Error('Error removing script.'));
    }
  });
};

var Geogebra = function Geogebra(props) {
  var refProps = (0, _react.useRef)(props);

  var _refProps$current = refProps.current,
      id = _refProps$current.id,
      LoadComponent = _refProps$current.LoadComponent,
      onReady = _refProps$current.onReady,
      appletOnLoad = _refProps$current.appletOnLoad,
      debug = _refProps$current.debug,
      reloadOnPropChange = _refProps$current.reloadOnPropChange;

  if (!id) {
    id = 'ggb-applet';
  }
  if (!debug) {
    debug = false;
  }
  //If a JSX Component is not given as a prop, use h3 with children
  if (!LoadComponent) {
    LoadComponent = function LoadComponent(_ref) {
      var children = _ref.children;
      return _react2.default.createElement(
        'h3',
        null,
        children
      );
    };
  }

  var url = 'https://geogebra.org/apps/deployggb.js';

  var _useState = (0, _react.useState)(false),
      _useState2 = _slicedToArray(_useState, 2),
      deployggbLoaded = _useState2[0],
      setDeployggbLoaded = _useState2[1];

  var _useState3 = (0, _react.useState)(true),
      _useState4 = _slicedToArray(_useState3, 2),
      loading = _useState4[0],
      setLoading = _useState4[1];

  var _useState5 = (0, _react.useState)(false),
      _useState6 = _slicedToArray(_useState5, 2),
      watchPropsChange = _useState6[0],
      setWatchPropsChange = _useState6[1];
  //gets called by GeoGebra after the Applet is ready


  var onAppletReady = function onAppletReady() {
    if (appletOnLoad) appletOnLoad();
    if (onReady) onReady();
    debug && console.log('Applet with id "' + id + '" is ready');
  };

  (0, _react.useEffect)(function () {
    !deployggbLoaded && loadScript(url, id).then(function (script) {
      debug && console.log('script from "' + url + '" succesfull loaded into the DOM');
      setDeployggbLoaded(true);
    }).catch(function (err) {
      return console.error(err);
    });

    return function () {
      setDeployggbLoaded(false);
      //removeScript(id);
      var tag = document.getElementById(id + '-holder');
      if (tag) {
        tag.lastChild.textContent = '';
      }
    };
  }, []);
  if (reloadOnPropChange) {
    (0, _react.useEffect)(function () {
      var propsChanged = Object.keys(props).map(function (key) {
        if (typeof refProps.current[key] === 'function' && typeof props[key] === 'function') return false;
        if (_typeof(refProps.current[key]) === 'object' && _typeof(props[key]) === 'object') return false;
        return refProps.current[key] !== props[key];
      });
      if (propsChanged.some(function (element) {
        return element === true;
      })) {
        refProps.current = props;
        setWatchPropsChange(true);
      }
    }, [props]);
  }
  (0, _react.useEffect)(function () {
    if (window.GGBApplet) {
      var parameter = JSON.parse(JSON.stringify(refProps.current));
      parameter.appletOnLoad = onAppletReady;
      var ggbApp = new window.GGBApplet(parameter, true);
      ggbApp.inject(id);
      setLoading(false);
      setWatchPropsChange(false);
      debug && console.log('applet with id "' + id + '" succesfull injected into the DOM');
    }
    return function () {
      var tag = document.getElementById(id + '-holder');
      if (tag) {
        tag.lastChild.textContent = '';
      }
    };
  }, [deployggbLoaded, watchPropsChange]);

  return _react2.default.createElement(
    'div',
    { id: id + '-holder' },
    loading && _react2.default.createElement(
      LoadComponent,
      null,
      'Loading'
    ),
    _react2.default.createElement('div', { id: id })
  );
};

Geogebra.defaultProps = {
  appName: 'classic',
  width: 800,
  height: 600,
  showToolBar: true,
  showAlgebraInput: true,
  showMenuBar: true,
  reloadOnPropChange: false
};

exports.default = Geogebra;