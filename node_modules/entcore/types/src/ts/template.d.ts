export interface TemplateDelegate {
    tryOpen(args: {
        name: string;
        view: string;
        success: () => void;
        reject: () => void;
    }): void;
}
export declare var template: {
    viewPath: string;
    containers: any;
    readyPromises: {
        [id: string]: {
            promise: Promise<void>;
            resolve(): void;
            reject(): void;
        };
    };
    callbacks: {};
    _delegate: TemplateDelegate;
    getReadyPromise(name: string, forceReset?: boolean): {
        promise: Promise<void>;
        resolve(): void;
        reject(): void;
    };
    deleteReadyPromise(name: string): void;
    setDelegate(delegate: TemplateDelegate): void;
    removeDelegate(): void;
    getCompletePath(view: string, isPortal?: boolean): string;
    loadPortalTemplates(): void;
    open: (name: string, view?: string) => Promise<{}>;
    _open: (name: string, view?: string) => void;
    contains: (name: any, view: any) => boolean;
    isEmpty: (name: any) => boolean;
    getPath: (view: any) => string;
    close: (name: any) => void;
    watch: (container: string, fn: any) => void;
    unwatch: (container: string, fn: any) => void;
};
