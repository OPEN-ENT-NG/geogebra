import { Eventer, Selection, Selectable } from 'entcore-toolkit';
import * as workspaceModel from "./model";
export declare class Quota {
    max: number;
    used: number;
    unit: string;
    constructor();
    appropriateDataUnit(bytes: number): {
        nb: number;
        order: any;
    };
    refresh(): Promise<void>;
}
export declare let quota: Quota;
export declare class Revision implements workspaceModel.Revision {
    _id?: string;
    documentId: string;
}
export declare enum DocumentStatus {
    initial = "initial",
    loaded = "loaded",
    failed = "failed",
    loading = "loading",
}
export declare class Document extends workspaceModel.Element {
    isNew: boolean;
    delete(): Promise<void>;
    abort(): void;
    readonly size: string;
    loadProperties(): Promise<void>;
    /**
     * used by image editor
     */
    saveChanges(): Promise<void>;
    /**
     * used by image editor
     */
    applyBlob(): Promise<void>;
    refreshHistory(): Promise<void>;
    upload(file: File | Blob, visibility?: 'public' | 'protected' | 'owner', application?: string, parent?: workspaceModel.Element): Promise<workspaceModel.Element>;
    protectedDuplicate(callback?: (document: Document) => void): Promise<Document>;
    publicDuplicate(callback?: (document: Document) => void): Promise<Document>;
    update(blob: Blob): Promise<void>;
    trash(): Promise<any>;
}
export declare class Folder implements Selectable {
    _id: string;
    eParent: string;
    selected: boolean;
    name: string;
    folders: Selection<Folder>;
    documents: Selection<Document>;
    owner: string;
    filter: workspaceModel.TREE_NAME;
    private _newModel;
    constructor(filter: workspaceModel.TREE_NAME, f?: workspaceModel.Element);
    readonly isChildrenLoading: boolean;
    readonly isDocumentLoading: boolean;
    readonly isChildrenOrDocumentLoading: boolean;
    canExpand(): boolean;
    setChildren(children: workspaceModel.Element[]): void;
    setChildrenFromTree(tree: workspaceModel.Tree): void;
    deselectAll(): void;
    closeFolder(): void;
    isOpened(currentFolder: Folder): boolean;
    isOpenedRecursive(currentFolder: Folder): boolean;
    sync(): Promise<void>;
}
export declare class MyDocuments extends Folder {
    constructor();
    sync(): Promise<void>;
}
export declare class SharedDocuments extends Folder {
    constructor();
    sync(): Promise<void>;
}
export declare class AppDocuments extends Folder {
    constructor();
    sync(): Promise<void>;
}
export declare class PublicDocuments extends Folder {
    constructor();
    sync(): Promise<void>;
}
export declare class MediaLibrary {
    static synchronized: boolean;
    static myDocuments: MyDocuments;
    static sharedDocuments: SharedDocuments;
    static appDocuments: AppDocuments;
    static externalDocuments: AppDocuments;
    static publicDocuments: PublicDocuments;
    static trashDocuments: Folder;
    static eventer: Eventer;
    static sync(): Promise<void>;
    static deselectAll(): void;
    static upload(file: File | Blob, visibility?: 'public' | 'protected'): Promise<Document>;
}
