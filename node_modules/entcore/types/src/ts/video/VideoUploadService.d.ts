export declare type UploadResult = {
    data: {
        processid: string;
        state: "running" | "succeed" | "error";
        /** ID of the video file. */
        videoid?: string;
        /** size of the video, in bytes. */
        videosize: number;
        /** ID of the video document in Workspace. */
        videoworkspaceid: string;
        /** Error code (i18n key), when state==="error" */
        code?: string;
    };
    status: number;
    statusText: string;
    headers: any;
};
/**
 * This utility class allows uploading videos to the server, as documents.
 * Each video can be either recorded (Blob) or chosen from the local storage (File).
 * The server will process each uploaded video and convert them to a streamable format.
 */
export declare class VideoUploadService {
    private _maxWeight;
    private _maxDuration;
    private _acceptVideoUploadExtensions;
    private _initialized;
    readonly maxWeight: number;
    readonly maxDuration: number;
    private safeValueOf(obj, key, defaultValue);
    /** Awaits for loading the video public configuration. */
    initialize(): Promise<void>;
    getValidExtensions(): string[];
    checkValidExtension(ext: string): boolean;
    upload(file: Blob, filename: string, captation: boolean, duration?: string | number): Promise<UploadResult>;
}
