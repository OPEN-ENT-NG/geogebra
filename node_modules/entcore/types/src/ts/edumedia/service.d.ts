import { Element } from "../workspace/model";
import { Document } from "../workspace/workspace-v1";
export interface EdumediaConfig {
    uri: string;
    pattern: string;
    ignoreSubjects?: string[];
}
export interface EdumediaMedia {
    id: string;
    title: string;
    type: "simulation" | "video" | "doc_pack";
    computedType: "simulation" | "video" | "quiz" | "doc_pack";
    width: number;
    height: number;
    wide: boolean;
    href: string;
    apiURL: string;
    thumbnail: string;
    leaf: boolean;
    media: boolean;
}
export interface EdumediaMediaDetails extends EdumediaMedia {
    frameURL: string;
}
export interface EdumediaSearchResult {
    href: "string";
    q: "string";
    medias: EdumediaMedia[];
}
export interface EdumediaTree {
    id: string;
    title: string;
    type: "root" | "node" | "curriculum";
    leaf: boolean;
    href: string;
    parentID: string;
    children?: EdumediaTreeItem[];
    medias?: EdumediaMedia[];
}
export interface EdumediaTreeItem {
    id: string;
    title: string;
    href: string;
    apiURL: string;
    leaf: boolean;
}
export declare const EDU_MEDIA_CONTENT_TYPE = "edumedia/html";
export declare const edumediaService: {
    cacheBaseUrl: any;
    cacheConfig: any;
    isEdumediaEnabled(): Promise<boolean>;
    getEdumediaConfig(): Promise<EdumediaConfig>;
    fetchHtml(element: Element): Promise<{}>;
    hasEdumediaContentType(element: Element): boolean;
    getUrl(): Promise<string>;
    getToken(): Promise<string>;
    search(search: string, max?: number, fromItemId?: string): Promise<EdumediaSearchResult>;
    fetchSubjects(): Promise<EdumediaTree>;
    fetchChildren(item: EdumediaTreeItem): Promise<EdumediaTree>;
    fetchMediaDetail(media: EdumediaMedia): Promise<EdumediaMediaDetails>;
    getContentTypeFor(media: EdumediaMedia | EdumediaMediaDetails): string;
    getIdFromContentType(contentType: string): string;
    getThumbFromContentType(contentType: string): string;
    toHtml(media: EdumediaMediaDetails): string;
    saveIntoWorkspace(media: EdumediaMediaDetails): Promise<Document>;
    removeContent(id: any): void;
    closeFullScreen(): void;
    makeFullscreen: (id: any) => void;
};
